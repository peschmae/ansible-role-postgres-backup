---
- name: create backup-scripts dir
  file:
    dest: "{{ postgres_backup_script_location }}"
    state: directory
    owner: "{{ postgres_backup_script_user }}"
    mode: 0764

# tasks file for ansible-role-postgres-backup
- name: copy rotated backup script
  copy:
    src: files/pg_backup_rotated.sh
    dest: "{{ postgres_backup_script_location }}/pg_backup.sh"
    owner: "{{ postgres_backup_script_user }}"
    mode: 0744
  when: postgres_backup_rotate

- name: copy backup script
  copy:
    src: files/pg_backup.sh
    dest: "{{ postgres_backup_script_location }}/pg_backup.sh"
    owner: "{{ postgres_backup_script_user }}"
    mode: 0744
  when: not postgres_backup_rotate

- name: create pg_backup.config from template
  template:
    src: templates/pg_backup.config.j2
    dest: "{{ postgres_backup_script_location }}/pg_backup.config"
    owner: "{{ postgres_backup_script_user }}"
    mode: 0644

# Ansible doesn't allow passing the cronsyntax, so we split it and set each configuration by itself
- name: create cronjob from cronjob syntax
  block:
    - name: convert cron syntax into list (thanks ansible...)
      set_fact:
        psql_backup_cron_schedule: "{{ postgres_backup_cronjob_schedule.split(' ') }}"

    - name: create cronjob entry
      cron:
        name: "backup all postgres databases"
        job: "{{ postgres_backup_script_location }}/pg_backup.sh"
        user: "{{ postgres_backup_script_user }}"
        minute: "{{ psql_backup_cron_schedule[0] }}"
        hour: "{{ psql_backup_cron_schedule[1] }}"
        day: "{{ psql_backup_cron_schedule[2] }}"
        month: "{{ psql_backup_cron_schedule[3] }}"
        weekday: "{{ psql_backup_cron_schedule[4] }}"
        state: "{{ 'present' if postgres_backup_cronjob_enabled else 'absent' }}"
  when:
  - postgres_backup_cronjob_enabled
  - postgres_backup_cronjob_schedule not in postgres_backup_cronjob_special_time

- name: create cronjob with special time syntax
  block:
    - name: create cronjob entry
      cron:
        name: "backup all postgres databases"
        job: "{{ postgres_backup_script_location }}/pg_backup.sh"
        user: "{{ postgres_backup_script_user }}"
        special_time: "{{ postgres_backup_cronjob_schedule }}"
        state: "{{ 'present' if postgres_backup_cronjob else 'absent' }}"
  when:
  - postgres_backup_cronjob_enabled
  - postgres_backup_cronjob_schedule in postgres_backup_cronjob_special_time
